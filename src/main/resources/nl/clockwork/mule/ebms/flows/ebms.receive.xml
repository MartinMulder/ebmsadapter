<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 Clockwork
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:http="http://www.mulesource.org/schema/mule/http/2.2" 
	xmlns:cxf="http://www.mulesource.org/schema/mule/cxf/2.2"
	xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:jdbc="http://www.mulesource.org/schema/mule/jdbc/2.2"
	xmlns:script="http://www.mulesource.org/schema/mule/scripting/2.2"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
		http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
		http://www.mulesource.org/schema/mule/cxf/2.2 http://www.mulesource.org/schema/mule/cxf/2.2/mule-cxf.xsd
		http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
		http://www.mulesource.org/schema/mule/jdbc/2.2 http://www.mulesource.org/schema/mule/jdbc/2.2/mule-jdbc.xsd
		http://www.mulesource.org/schema/mule/scripting/2.2 http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd  
	"
>

	<model>

		<service name="ebms.soap.receive">
			<inbound>
				<cxf:inbound-endpoint connector-ref="connector.cxf.ebms.in" protocolConnector="connector.http.ebms.in" address="${service.protocol}://${service.host}:${service.port}${service.url}" serviceName="EbMSPortType" namespace="http://www.clockwork.nl/ebms/1.0" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
					<response-transformers>
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</response-transformers>
					<cxf:inInterceptors>
						<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						<!--spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSContentTypeFixingInInterceptor" /-->
						<spring:bean class="nl.clockwork.mule.ebms.cxf.MessageInInterceptor" />
						<spring:bean class="nl.clockwork.mule.ebms.cxf.AttachmentInInterceptor" />
						<spring:bean class="nl.clockwork.mule.ebms.cxf.EbMSSecSignatureInInterceptor">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
							<spring:property name="keyStorePath" value="${truststore.path}" />
							<spring:property name="keyStorePassword" value="${truststore.password}" />
						</spring:bean>  
					</cxf:inInterceptors>
					<cxf:outInterceptors>
						<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
					</cxf:outInterceptors>
				</cxf:inbound-endpoint>
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.service.EbMSPortTypeImpl" />
				<binding interface="nl.clockwork.mule.ebms.service.EbMSMessageProcessor" method="process">
					<vm:outbound-endpoint path="ebms.message.receive.in" synchronous="true">
						<script:transformer>
							<script:script engine="groovy">
								import nl.clockwork.mule.ebms.Constants;
								import nl.clockwork.mule.ebms.model.EbMSMessage;

								Object[] objects = message.getPayload();
								message.setProperty(Constants.EBMS_SIGNATURE,objects[1]);
								message.setPayload(objects[0]);
								return message;
							</script:script>
						</script:transformer>
					</vm:outbound-endpoint>
				</binding>
				<binding interface="nl.clockwork.mule.ebms.service.EbMSMessageErrorProcessor" method="process">
					<vm:outbound-endpoint path="ebms.messageError.receive.in" synchronous="true"/>
				</binding>
				<binding interface="nl.clockwork.mule.ebms.service.EbMSAcknowledgmentProcessor" method="process">
					<vm:outbound-endpoint path="ebms.acknowledgment.receive.in" synchronous="true"/>
				</binding>
				<binding interface="nl.clockwork.mule.ebms.service.EbMSMessageStatusProcessor" method="process">
					<vm:outbound-endpoint path="ebms.messageStatus.receive.in" synchronous="true"/>
				</binding>
				<binding interface="nl.clockwork.mule.ebms.service.EbMSPingProcessor" method="process">
					<vm:outbound-endpoint path="ebms.ping.receive.in" synchronous="true"/>
				</binding>
			</component>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.message.receive.async.reply">
				<message-properties-transformer>
					<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_INTERNAL_SERVER_ERROR"/>
				</message-properties-transformer>
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		
		<service name="ebms.message.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.receive.in" />
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.eliminateDuplicate.in" />
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="60000">
				<vm:inbound-endpoint path="ebms.message.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>

		<service name="ebms.message.eliminateDuplicate">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.eliminateDuplicate.in" />
				<selective-consumer-router>
					<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSDuplicateMessageFilter">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
					</custom-filter>
				</selective-consumer-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.message.validate.in" />
				</forwarding-catch-all-strategy>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.response.resend.in" />
					<!--vm:outbound-endpoint path="ebms.response.get.in" /-->
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="ebms.response.resend">
			<inbound>
				<vm:inbound-endpoint path="ebms.response.resend.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSRefToMessageToEbMSMessageIdProperty">
					<!--custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSResponseToMessageToEbMSMessageIdProperty"-->
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<chaining-router>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="addEbMSMessageSendEvent">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdPropertyToMap" />
					</jdbc:outbound-endpoint>
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
				</chaining-router>
			</outbound>
		</service>
		
		<service name="ebms.message.validate">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.validate.in" />
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.cpa.invalid" />
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.CPAValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UnAuthorized"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSSignatureValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UnAuthorized"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageHeaderValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="NotRecognized"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageDataValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UnAuthorized"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageBodyValidationFilter" />
					</not-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.acknowledgment.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="Received"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		
		<service name="ebms.messageError.create">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.create.in">
					<custom-transformer class="nl.clockwork.mule.common.enricher.AddPayloadAsProperty">
						<spring:property name="propertyName" value="EBMS.EBMS_MESSAGE"/>
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSMessageError">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.messageError.out.store.in"/>
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="ebms.messageError.out.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.out.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSMessageInEbMSMessageErrorOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

		<service name="ebms.acknowledgment.create">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.create.in">
					<custom-transformer class="nl.clockwork.mule.common.enricher.AddPayloadAsProperty">
						<spring:property name="propertyName" value="EBMS.EBMS_MESSAGE"/>
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSAcknowledgment">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.out.store.in"/>
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="ebms.acknowledgment.out.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.out.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSMessageInEbMSAcknowledgmentOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.messageError.receive.async.reply">
				<message-properties-transformer>
					<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_INTERNAL_SERVER_ERROR"/>
				</message-properties-transformer>
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<!-- TODO validate message -->
		<service name="ebms.messageError.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.receive.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSRefToMessageToEbMSMessageIdProperty"/>
					<!--custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSBaseMessageToEbMSMessageIdProperty">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer-->
					<message-properties-transformer>
						<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="nl.clockwork.mule.ebms.Constants.EbMSMessageStatus.RECEIVED"/>
					</message-properties-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.messageError.in.store.in"/>
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="60000">
				<vm:inbound-endpoint path="ebms.messageError.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>
		
		<service name="ebms.messageError.in.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.in.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSMessageErrorIn">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.messageError.receive.async.reply">
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.acknowledgment.receive.async.reply">
				<message-properties-transformer>
					<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_INTERNAL_SERVER_ERROR"/>
				</message-properties-transformer>
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<!-- TODO validate message -->
		<service name="ebms.acknowledgment.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.receive.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSRefToMessageToEbMSMessageIdProperty"/>
					<!--custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSBaseMessageToEbMSMessageIdProperty">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer-->
					<message-properties-transformer>
						<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="nl.clockwork.mule.ebms.Constants.EbMSMessageStatus.RECEIVED"/>
					</message-properties-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.in.store.in"/>
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="60000">
				<vm:inbound-endpoint path="ebms.acknowledgment.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>
		
		<service name="ebms.acknowledgment.in.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.in.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSAcknowledgmentIn">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.receive.async.reply">
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

</mule>
